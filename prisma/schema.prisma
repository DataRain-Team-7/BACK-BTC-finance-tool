// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             String  @id @unique @default(uuid())
  name           String  @db.VarChar(100)
  email          String  @unique @db.VarChar(100)
  password       String
  imageUrl       String? @map("image_url")
  position       String  @db.VarChar(200)
  billable       Boolean @default(false)
  allocated      Boolean @default(false)
  validatedEmail Boolean @default(false) @map("validated_email")

  role     Roles  @relation(fields: [roleName], references: [name])
  roleName String @map("role_name")

  projects UsersProjects[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Roles {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       Users[]

  @@map("roles")
}

model Teams {
  id           String              @id @unique @default(uuid())
  name         String              @db.VarChar(100)
  valuePerHour Float               @map("value_per_hour")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")
  alternatives AlternativesTeams[]

  @@map("teams")
}

model Questions {
  id               String             @id @unique @default(uuid())
  description      String             @db.VarChar(500)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  alternatives     Alternatives[]
  clientsResponses ClientsResponses[]

  @@map("questions")
}

model Alternatives {
  id          String @id @unique @default(uuid())
  description String @db.VarChar(500)

  question   Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String    @map("question_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  teams            AlternativesTeams[]
  clientsResponses ClientsResponses[]

  @@map("alternatives")
}

model AlternativesTeams {
  id        String @id @unique @default(uuid())
  workHours Int?   @map("work_hours")

  alternative   Alternatives @relation(fields: [alternativeId], references: [id], onDelete: Cascade)
  alternativeId String       @map("alternative_id")

  team   Teams  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @map("team_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([alternativeId, teamId])
  @@map("alternatives_team")
}

model Clients {
  id                    String  @id @unique @default(uuid())
  email                 String  @unique @db.VarChar(100)
  phone                 String  @db.VarChar(16)
  companyName           String  @map("company_name") @db.VarChar(100)
  mainContact           String  @map("mail_contact") @db.VarChar(100)
  technicalContact      String? @map("technical_contact") @db.VarChar(100)
  technicalContactPhone String? @map("technical_contact_phone") @db.VarChar(16)
  technicalContactEmail String? @map("technical_contact_email") @db.VarChar(100)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  budgetRequests BudgetRequest[]
  projects       Projects[]

  @@map("clients")
}

model BudgetRequest {
  id         String @id @unique @default(uuid())
  amount     Float
  totalHours Int    @map("total_hours")
  status     Status @default(request)

  client   Clients @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String  @map("client_id")

  verifyByPreSaleId   String? @map("verify_by_pre_sale_id")
  verifyByFinancialId String? @map("verify_by_financial_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  clientsResponses ClientsResponses[]

  @@map("budget_request")
}

enum Status {
  request
  review
  approved
}

model ClientsResponses {
  id              String  @id @unique @default(uuid())
  responseDetails String? @map("response_details") @db.VarChar(1000)
  valuePerHour    Float?  @map("value_per_hour")
  workHours       Int?    @map("work_hours")

  question   Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String    @map("question_id")

  alternative   Alternatives? @relation(fields: [alternativeId], references: [id], onDelete: SetNull)
  alternativeId String?       @map("alternative_id")

  budgetRequest   BudgetRequest @relation(fields: [budgetRequestId], references: [id], onDelete: Cascade)
  budgetRequestId String        @map("budget_request_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("clients_responses")
}

model Projects {
  id                        String  @id @unique @default(uuid())
  name                      String  @db.VarChar(100)
  description               String  @db.VarChar(500)
  containsManager           Boolean @default(false) @map("contains_manager")
  summedTimeValueOfAllUsers Float   @default(0) @map("summed_time_value_of_all_users")

  client   Clients? @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientId String?  @map("client_id")

  users UsersProjects[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

model UsersProjects {
  id               String @id @unique @default(uuid())
  valuePerUserHour Float  @map("value_per_user_hour")

  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String   @map("project_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  normalHours NormalHours[]

  @@unique([userId, projectId])
  @@map("users_projects")
}

model NormalHours {
  id        String    @id @unique @default(uuid())
  date      String
  entry     DateTime
  exitBreak DateTime? @map("exit_break")
  backBreak DateTime? @map("back_break")
  exit      DateTime?

  userProject   UsersProjects @relation(fields: [userProjectId], references: [id])
  userProjectId String        @map("user_project_id")

  @@map("normal_hours")
}
