// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             String  @id @unique @default(uuid())
  name           String  @db.VarChar(100)
  email          String  @unique @db.VarChar(100)
  password       String
  imageUrl       String? @map("image_url")
  position       String  @db.VarChar(200)
  billable       Boolean @default(false)
  allocated      Boolean @default(false)
  validatedEmail Boolean @default(false) @map("validated_email")

  role     Roles  @relation(fields: [roleName], references: [name])
  roleName String @map("role_name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Roles {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       Users[]

  @@map("roles")
}

model Teams {
  id           String              @id @unique @default(uuid())
  name         String              @db.VarChar(100)
  valuePerHour Float               @map("value_per_hour")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")
  alternatives AlternativesTeams[]

  @@map("teams")
}

model Questions {
  id               String             @id @unique @default(uuid())
  description      String             @db.VarChar(500)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  alternatives     Alternatives[]
  clientsResponses ClientsResponses[]

  @@map("questions")
}

model Alternatives {
  id          String @id @unique @default(uuid())
  description String @db.VarChar(500)

  question   Questions @relation(fields: [questionId], references: [id])
  questionId String    @map("question_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  teams                     AlternativesTeams[]
  clientsResponses          ClientsResponses[]
  alternativeBudgetRequests AlternativeBudgetRequest[]

  @@map("alternatives")
}

model AlternativesTeams {
  id        String @id @unique @default(uuid())
  workHours Int?   @map("work_hours")

  alternative   Alternatives @relation(fields: [alternativeId], references: [id])
  alternativeId String       @map("alternative_id")

  team   Teams  @relation(fields: [teamId], references: [id])
  teamId String @map("team_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([alternativeId, teamId])
  @@map("alternatives_team")
}

model Clients {
  id String @id @unique @default(uuid())

  name           String?         @db.VarChar(150)
  companyName    String          @unique() @db.VarChar(150)
  email          String?         @db.VarChar(150)
  phone          String?         @db.VarChar(25)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  budgetRequests BudgetRequest[]

  @@map("clients")
}

model BudgetRequest {
  id String @id @unique @default(uuid())

  amount     Float
  totalHours Int    @map("total_hours")
  status     Status @default(request)

  client   Clients @relation(fields: [clientId], references: [id])
  clientId String  @map("client_id")

  verifyByPreSaleId   String? @map("verify_by_pre_sale_id")
  verifyByFinancialId String? @map("verify_by_financial_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  clientsResponses          ClientsResponses[]
  alternativeBudgetRequests AlternativeBudgetRequest[]

  @@map("budget_request")
}

enum Status {
  request
  review
  approved
}

model ClientsResponses {
  id              String  @id @unique @default(uuid())
  responseDetails String? @map("response_details") @db.VarChar(1000)

  question   Questions @relation(fields: [questionId], references: [id])
  questionId String    @map("question_id")

  alternative   Alternatives? @relation(fields: [alternativeId], references: [id])
  alternativeId String?       @map("alternative_id")

  budgetRequest   BudgetRequest @relation(fields: [budgetRequestId], references: [id])
  budgetRequestId String        @map("budget_request_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("clients_responses")
}

model AlternativeBudgetRequest {
  id           String @id @unique @default(uuid())
  valuePerHour Float @map("value_per_hour")
  workHours    Int?    @map("work_hours")

  alternative   Alternatives @relation(fields: [alternativeId], references: [id])
  alternativeId String       @map("alternative_id")

  budgetRequest   BudgetRequest @relation(fields: [budgetRequestId], references: [id])
  budgetRequestId String        @map("budget_request_id")

  @@map("alternative_budget_request")
}
